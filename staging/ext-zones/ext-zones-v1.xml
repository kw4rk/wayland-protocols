<?xml version="1.0" encoding="UTF-8"?>
<protocol name="ext_zones_v1">

  <copyright>
    Copyright © 2023-2024 Matthias Klumpp
    Copyright ©      2024 Victoria Brekenfeld

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice (including the next
    paragraph) shall be included in all copies or substantial portions of the
    Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
  </copyright>

  <description summary="protocol to manage client-specific zones and set window placement within them">
    This protocol provides a way for clients to create and add toplevel windows
    to "zones".

    A zone is a isolated environment with its own coordinate space where
    clients can add and arrange windows that logically belong to each other.
    It provides means for, among other things, requesting that windows are
    placed at specific coordinates within the zone coordinate space.
    See the description of "ext_zone_v1" for more details.

    This document adheres to RFC 2119 when using words like "must",
    "should", "may", etc.

    Warning! The protocol described in this file is currently in the testing
    phase. Backward compatible changes may be added together with the
    corresponding interface version bump. Backward incompatible changes can
    only be done by creating a new major version of the extension.
  </description>

  <interface name="ext_zone_item_v1" version="1">
    <description summary="opaque surface object that can be positioned">
      The zone item object is an opaque descriptor for a positionable
      element, such as a toplevel window.
      It currently can only be created from a 'xdg_toplevel' via a
      'get_zone_item' request.
    </description>

    <request name="destroy" type="destructor">
      <description summary="delete this object">
        Destroys the zone item. This request may be sent at any time by the
        client.
        By destroying the object, the respective item surface remains at its
        last position, but its association with its zone is lost.
        This will also cause it to loose any attached state, like the its
        layer index.
      </description>
    </request>
  </interface>

  <interface name="ext_zone_manager_v1" version="1">
    <description summary="manage zones for applications">
      The ext_zone_manager interface defines base requests for obtaining and
      managing zones for a client.
    </description>

    <request name="destroy" type="destructor">
      <description summary="Destroy this object">
       This has no effect other than to destroy the ext_zone_manager object.
      </description>
    </request>

    <request name="get_zone_item">
      <description summary="create a positionable item representing a toplevel">
	Create a new positionable zone item from an xdg_toplevel.
        The resulting wrapper object can then be used to position the
        toplevel window in a zone.
      </description>
      <arg name="id" type="new_id" interface="ext_zone_item_v1"/>
      <arg name="toplevel" type="object" interface="xdg_toplevel" summary="the toplevel window"/>
    </request>

    <request name="get_zone">
      <description summary="join a zone or request a new one">
	Create a new zone. While the zone object exists, the compositor
        must consider it "used" and keep track of it.

	A zone is represented by a string 'handle'.

        The compositor must keep zone handles valid while any client is
        using the corresponding zone and has items associated with it.
        The compositor may always give a client the same zone and
        remember its position and size for the client, but clients should
        not rely on this behavior.

        A client can request a zone to be placed on a specific
        output by passing a wl_output as 'output'. If a valid output
        is set, the compositor should place the zone on that output.
        If NULL is passed, the compositor decides the output.

        The client is expected to place its windows in the available space
        the compositor provides for the zone as best as it can.
        The compositor should provide the biggest reasonable space for the
        client, governed by its own policy.
      </description>
      <arg name="id" type="new_id" interface="ext_zone_v1"/>
      <arg name="output" type="object" interface="wl_output"
           summary="the preferred output to place the zone on, or NULL"
	   allow-null="true"/>
    </request>

    <request name="get_zone_from_handle">
      <description summary="join a zone via its handle">
	Create a new zone object using the zone's handle.
        For the returned zone, the same rules as described in
        'get_zone' apply.

        This requests returns a reference to an existing or remembered zone
        that is represented by 'handle'.
        The zone may potentially have been created by a different client.

        This allows cooperating clients to share the same coordinate space,
        but prevents other clients from learning window positions of unrelated
        clients.

        If the zone handle was invalid or unknown, a new zone must
        be created and returned instead, following the rules outlined
        in 'get_zone' and assuming no output preference.

        Every new zone object created by this request emits its initial event
        sequence, including the 'handle' event, which my return a different
        handle from the one passed to this request in case the existing zone
        could not be joined.
      </description>
      <arg name="id" type="new_id" interface="ext_zone_v1"/>
      <arg name="handle" type="string" summary="the handle of a zone"/>
    </request>
  </interface>

  <interface name="ext_zone_v1" version="1">
    <description summary="area for a client in which in can set window positioning preferences">
      An 'ext_zone' describes a display area provided by the compositor in
      which a client can place windows and move them around.

      A zone's area could for example correspond to the space usable for
      placing windows on a specific output (space without panels or other
      restricted elements) or it could be an area of the output the compositor
      has specifically chosen for a client to place its surfaces in.

      Windows are added to a zone as 'ext_zone_item_v1' item objects.

      A compositor may visually distinguish what makes up a zone, for example
      by adding a frame around it and/or a background.

      All items associated with a zone should ideally be always contained
      within it. If possible, the compositor may ensure this by resizing
      zone accordingly if the user moves items surfaces out of the zone's
      original bounds.
      If this can not be done, the compositor must force the item to leave the
      respective zone (emitting an 'item_left' event).

      All item surface coordinates (x, y) are relative to the selected zone.
      They are using the 'size' of the respective zone as coordinate system,
      with (0, 0) being in the top left corner.

      An item (e.g. a toplevel window) is considered "in bounds" if it can easily
      be moved within the zone by the user (e.g. enough of its title bar is in
      the zone so an item can be dragged around).
      The surface of the item may extent beyond the zone's size, but it may not
      be fully visible to the user in that case.
      This behavior is subject to sensible compositor policy.

      If a zone item is moved out of the top/left boundaries of the zone by
      user interaction, its coordinates must become negative, relative to the
      zones top-left coordinate origin. A client may set negative coordinates,
      but the compositor must ensure the item is still visible and accessible
      to the user and is not moved into invisible space outside of a zone.

      The absolute position of the zone within the compositor's coordinate space
      is opaque to the client and the compositor may move the entore zone around
      without the client's notice. It may also be arbitrarily resized, in which
      case the respective 'size' event must be emitted again to notify the client.

      Zone items are allowed to have a "layer" attribute, to keep them permanently
      above or below other surfaces in the same zone.
      Using layers, clients can overlay their own windows permanently, but not
      the ones of other clients not sharing a zone.

      Upon creation the compositor must emit 'size' and 'handle' events for the
      newly created 'ext_zone', followed by 'done'.
    </description>

    <enum name="error">
      <entry name="invalid" summary="a passed value has been invalid"
	     value="1"/>
    </enum>

    <request name="destroy" type="destructor">
      <description summary="destroy the ext_zone object">
	Using this request a client can tell the compositor that it is not
	going to use the ext_zone object anymore.
        The zone itself must only be destroyed if no other client
        is using it anymore, so this request may only destroy the object
        reference owned by the client.
      </description>
    </request>

    <event name="size">
      <description summary="size of the zone">
	The 'size' event describes the size of this zone.

        It is a rectangle with its origin in the top-left corner, using
        the surface coordinate space (device pixels divided by the scaling
        factor of the output this zone is attached to).

        If a width or height value is zero, the zone is infinite
        in that direction.

        The 'size' event is sent immediately after creating an 'ext_zone_v1',
	and whenever the size of the zone changes. A zone can change at any
	time, for any reason, for example output size or scaling changes,
        or by compositor policy.

        Upon subsequent emissions of 'size' after 'ext_zone_v1' had already
        been created, the 'done' event does not have to be sent again.
      </description>
      <arg name="width" type="int"
	   summary="zone width in logical pixels"/>
      <arg name="height" type="int"
	   summary="zone height in logical pixels"/>
    </event>

    <event name="handle">
      <description summary="the zone handle">
	The handle event provides the unique handle of this zone.
        The handle may be shared with any client, which then can use it to
	join this client's zone by calling
        ext_zone_manager.get_zone.
      </description>
      <arg name="handle" type="string" summary="the exported zone handle"/>
    </event>

    <event name="done">
      <description summary="all information about the zone have been sent">
	This event is sent after all other properties (size, handle) of an
        ext_zone have been sent.

	This allows changes to the ext_zone properties to be seen as
	atomic, even if they happen via multiple events.
      </description>
    </event>

    <request name="add_item">
      <description summary="associate an item with this zone">
        Make 'item' a member of this zone.
        This state is double-buffered and is applied on the next
        wl_surface.commit of the surface represented by 'item'.

        This request associates an item with this zone.
        If this request is called on an item that already has a zone
        association with a different zone, the item should leave its old zone
        (with 'item_left' being emitted on its old zone) and will instead
        be associated with this zone.

        Upon receiving this request and if the target zone is allowed for 'item',
        a compositor must emit 'item_entered' to confirm the zone association.
        It must even emit this event if the item was already associated with this
        zone before.

        The compositor must move the surface represented by 'item' into the
        boundary of this zone upon receiving this request and accepting it
        (either by extending the zone size, or by moving the item surface).

        If the compositor does not allow the item to switch zone associations,
        and wants it to remain in its previous zone, it must emit
        'item_blocked' instead.
        Compositors might want to prevent zone associations if they
        perform specialized window management (e.g. autotiling) that would
        make clients moving items between certain zones undesirable.
      </description>
      <arg name="item" type="object" interface="ext_zone_item_v1" summary="the zone item"/>
    </request>

    <request name="remove_item">
      <description summary="disassociate an item from this zone">
        Remove 'item' as a member of this zone.
        This state is double-buffered and is applied on the next
        wl_surface.commit of the surface represented by 'item'.

        This request removes the item from this zone explicitly,
        making the client unable to retrieve coordinates again.

        Upon receiving this request, the compositor should not change the
        item surface position on screen, and must emit 'item_left' to confirm
        the item's removal. It must even emit this event if the
        item was never associated with this zone.
      </description>
      <arg name="item" type="object" interface="ext_zone_item_v1" summary="the zone item"/>
    </request>

    <event name="item_blocked">
      <description summary="an item could not be associated with this zone">
        This event notifies the client that an item was prevented from
        joining this zone.

        It is emitted as a response to 'add_item' if the compoistor did not
        allow the item to join this particular zone.
      </description>
      <arg name="item" type="object" interface="ext_zone_item_v1" summary="the item that was prevented from joining this zone"/>
    </event>

    <event name="item_entered">
      <description summary="notify about an item having joined this zone">
        This event notifies the client of an item joining a zone.

        It is emitted as a response to 'add_item' or if the compositor
        automatically had the item surface (re)join an existing zone.
      </description>
      <arg name="item" type="object" interface="ext_zone_item_v1" summary="the item that has joined the zone"/>
    </event>

    <event name="item_left">
      <description summary="notify about an item having left this zone">
        This event notifies the client of an item leaving this zone, and
        therefore the client being unable to retrieve its coordinates in
        future.
        If the client still wishes to adjust the item surface coordinates, it
        may associate the item with a zone again by calling 'add_item',
        potentially causing the zone boundaries to change.

        This event is emitted for example if the user moved an item surface out
        of a smaller zone's boundaries, or onto a different screen where the
        previous zone can not expand to. It is also emitted in response to
        explicitly removing an item via 'remove_item'.
      </description>
      <arg name="item" type="object" interface="ext_zone_item_v1" summary="the item that has left the zone"/>
    </event>

    <request name="set_position">
      <description summary="set a preferred item surface position">
        Request a preferred position (x, y) for the specified item
        surface to be placed at, relative to this zone.
        This state is double-buffered and is applied on the next
        wl_surface.commit of the surface represented by 'item'.

        If the item is not yet associated with a zone, or not associated
        with this zone, this request must be discarded and a 'position_failed'
        event must be emitted instead of the 'position' event that is sent on
        success.

        X and Y coordinates are relative to this zone, and must not be larger
        than the dimensions set by the zone size, or smaller than zero.
        If any coordinate is negative, and 'invalid' error must be raised.
        If a coordinate exceeds the zone's bounds, the compositor should sanitize
        it to more appropriate values (e.g. by clamping the values to the maximum
        size). For infinite zones, the client may pick any coordinate.

        Compositors implementing this protocol should try to place an item
        at the preferred coordinates relative to the zone, unless doing
        so is not allowed by compositor policy because e.g. the user has set
        custom rules for the surface represented by the respective item, the
        surface overlaps with a protected shell component, session management
        has loaded previous surface positions or the placement request would
        send the item out of bounds.

        Clients should be aware that their placement preferences might not
        always be followed and must be prepared to handle the case where the
        item is placed at a different position by the compositor.
        The compositor makes the ultimate final placement decision, but should
        take the client's preferences into account.

        Once an item has been mapped, a change to its placement preferences
        can still be requested and should be applied, but must not be followed
        by the compositor if the user is interacting with the affected item
        surface (e.g. clicking &amp; dragging within the window, or resizing it).

        After a call to this request, a 'position' event must be emitted with the
        item's new actual position.
      </description>
      <arg name="item" type="object" interface="ext_zone_item_v1" summary="the zone item"/>
      <arg name="x" type="int" summary="x position relative to zone"/>
      <arg name="y" type="int" summary="y position relative to zone"/>
    </request>

    <request name="get_position">
      <description summary="request the current position of the item">
        Request the position (x, y) of the item, relative to this zone.

        If 'item' was not associated with this zone prior to calling
        this request, a 'position_failed' event must be emitted.
        Otherwise, the compositor must respond with a 'position' event
        containing the requested information.

        If many 'get_position' requests are send for an item, the
        compositor may still only respond with one 'position' event,
        containing the latest position of the item.

        Clients should be aware that the returned position is subject
        to the compositor's window management policies and user settings,
        and may not follow any previously set placement preference.
        The returned position may also not reflect the item's current
        position, as it could have been moved inbetween issueing the request
        and receiving its result.
      </description>
      <arg name="item" type="object" interface="ext_zone_item_v1" summary="the zone item"/>
    </request>

    <event name="position">
      <description summary="notify about the position of an item">
        This event notifies the client of the current position (x, y) of
        the item relative to this zone.
        Coordinates are relative to the zone the item belongs to, and only
        valid within it.
        Negative coordinates are possible, if the user has moved an item
        surface beyone the zone's top-left boundary.

        The event is only sent in response to a 'get_position' request.
      </description>
      <arg name="item" type="object" interface="ext_zone_item_v1" summary="the item this position belongs to"/>
      <arg name="x" type="int" summary="current x position relative to zone"/>
      <arg name="y" type="int" summary="current y position relative to zone"/>
    </event>

    <event name="position_failed">
      <description summary="a get/set position request has failed">
        The compositor was unable to determine the position of the respective
        item, or could not set the position of the item.

        This could have happened because a request to 'get_position' was made
        using a zone that the 'item' does not belong to, or if it left its
        zone after a 'get_position' request was made.

        This is usually a transient error and the client may attempt a
        'get_position' request again after verifying the item's placement.
      </description>
      <arg name="item" type="object" interface="ext_zone_item_v1" summary="the item this event belongs to"/>
    </event>

    <request name="set_layer">
      <description summary="permanently pin an item to a relative z-order">
        Request a preferred permanent Z position for the specified
        item relative to other item surfaces in this zone.
        This state is double-buffered and is applied on the next
        wl_surface.commit of the surface represented by 'item'.

        This function associates a "layer index" with the respective item,
        with all item surfaces assumed to be positioned at a layer with
        index 0 by default.
        Item surfaces that are positioned in a layer with a higher index
        permanently float above items with a lower index. Items with a
        lower layer index sink below items with a higher index.

        Upon user interaction, sunken item surfaces are not raised on top of
        items in a layer with an index higher than theirs, and floating items
        do not sink below items in a lower layer, even if these items are
        selected.

        Items with the same layer index are subject to compositor policy,
        which usually means they will obey user interaction and raise above or
        sink below each other depending on which surface is currently activated.

        The layer index only affects the stacking order of items within the
        same zone. The compositor is allowed to move items of one zone
        (or no zone) above or below any item in a different zone, regardless
        of their zone-specific layer index.

        Compositors without support for stacking windows or with other conflicting
        policy may ignore this request.
      </description>
      <arg name="item" type="object" interface="ext_zone_item_v1" summary="the zone item"/>
      <arg name="layer_index" type="int" summary="the item surface layer position"/>
    </request>

  </interface>

</protocol>
